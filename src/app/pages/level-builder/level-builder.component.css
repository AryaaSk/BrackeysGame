input[type=button] /*On iOS it gives buttons round corners for some reason*/
{
    border-radius: 0;
    -webkit-border-radius: 0px;
}
.container
{
    position: absolute;
    top: 10px;
    bottom: 10px;
    left: 10px;
    right: 10px;
}
.containerInner
{
    height: 100%;
    width: 100%;

    display: grid;
    grid-template-columns: 100%;
    grid-template-rows: 30px auto 10px; /*Bottom 10px is just for bottom margin*/
}


.levelsContainer
{ 
    width: 100%;
    height: max-content;

    border-left: 1px solid black;
    border-top: 1px solid black;

    display: grid;
    grid-template-columns: 33% 33% 33%;
}
.level
{
    border-right: 1px solid black !important;
    border-bottom: 1px solid black !important;
}
@media only screen and (max-width: 1150px) { /*Changing the number of columns to be only 2 or even 1 when the width is smaller*/
    .levelsContainer
    {
        grid-template-columns: 50% 50%;
    }
    .addLevelButton
    {
        height: 400px;
        width: 300px;
    }
}
@media only screen and (max-width: 800px) {
    .levelsContainer
    {
        grid-template-columns: 100%;
    }
}
@media only screen and (max-width: 500px) {
    .levelsContainer
    {
        zoom: 80%;
    }
}
.addLevelButton
{
    min-height: 800px;
    height: 100%;
    width: 100%;
    margin-bottom: 10px;

    background-color: lightgrey;
    transition: 100ms background-color;
    border: none;

    font-size: 3rem;
    cursor: pointer;
}
.addLevelButton:active
{ background-color: rgb(172, 172, 172); }

.centered
{
    display: grid;
    place-content: center;
}


.levelMetadata
{
    height: max-content;
    width: var(--levelWidthPX);

    margin: 0 auto;
    margin-top: 10px;
    margin-bottom: 10px;

    display: grid;
    grid-template-columns: 100px auto;
    row-gap: 10px;
}
.metadataInput
{
    height: 40px;
    width: calc(100% - 20px);

    border: none;
    background-color: rgb(235, 235, 235);
    font-size: 1rem;
    
    padding-left: 10px;
    padding-right: 10px;
}
.metadataInput:focus
{ outline: none; }

.playDeleteLevelButton
{
    height: 40px;
    width: calc(var(--levelWidthPX) / 2);

    border: none;
    color: white;
    font-size: medium;
    cursor: pointer;
}
.playDeleteLevelButton.play
{ color: black; background-color: rgb(235, 235, 235); }
.playDeleteLevelButton.play:hover
{ background-color: lightgrey; }
.playDeleteLevelButton.delete
{ background-color: var(--badButtonColour); }
.playDeleteLevelButton.delete:hover
{ background-color: var(--badButtonColourSelected); }

.levelGrid
{
    /*The actual dimensions for the normal plane is 80 * 200, with 8 cubes on onw row*/
    width: calc(var(--levelWidthPX) + 40px); /*320px is for the 8 cubes, and then there's an extra 40px for the delete row button */
    /*height: 800px; Height is set dynamically*/
    position: relative;

    display: grid;
    grid-template-columns: 100%;
    grid-template-rows: repeat(auto-fill, 40px); /* since I multiplied the normal dimensions by 4, I also need to multiply the 10px by 4*/

    transform: translateX(20px); /*this is to account for the extra 40px from the delete button*/
}
.levelGridBorder
{
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 40px;

    border-left: 1px solid #2424246d;
    border-top: 1px solid #2424246d;

    pointer-events: none;
}
.levelObstacleRow
{
    display: grid;
    grid-template-columns: repeat(auto-fill, 40px);
}
.levelObstacle /*Need to use a different div for the border since I don't want the grid borders to show the extra 40px for the delete buttonts */
{ 
    cursor: pointer;
    border-right: 1px solid #2424246d;
    border-bottom: 1px solid #2424246d;
}
.addRowButton
{   
    height: 40px;
    width: var(--levelWidthPX);

    margin: 0 auto;
    margin-top: 15px;
    margin-bottom: 10px;

    border: none;
    
    background-color: var(--goodButtonColour);
    color: white;
    font-size: large;
    cursor: pointer;
}
.addRowButton:active
{ background-color: var(--goodButtonColourSelected); }
.deleteRowButton
{
    height: 100%;
    width: 100%;

    background-color: var(--badButtonColour);
    opacity: 0%;
    transition: 200ms;

    border: none;
    
    cursor: pointer;
}
.deleteRowButton:hover
{ opacity: 100%; }